name: "Release v0.3.x"

# Only a single job with this concurrency can run at any given time
concurrency: release-v0.3.x

on:
  # This runs on a schedule by default:
  # TODO: vvvvvvvvvvvvvvvv we may run this on a schedule at some point - just manual for now - Oct. 13, 2022
  # schedule:
  #   - cron: "6 17 * * 2"
  # TODO: ^^^^^^^^^^^^^^^^ we may run this on a schedule at some point - just manual for now - Oct. 13, 2022
  # https://crontab.guru/#6_17_*_*_2
  # Every Tuesday at 5:06pm UTC & 9:06am US West Coast.
  # GitHub Actions defaults to UTC:
  # There is high load on GitHub Actions at the top of the hour:
  #
  #     Note: The schedule event can be delayed during periods of high loads of
  #     GitHub Actions workflow runs. High load times include the start of every
  #     hour. To decrease the chance of delay, schedule your workflow to run at a
  #     different time of the hour.
  #
  # So we run these at a special time, 9:06. Ask @gerhard about it.

  # And it also supports manual triggering:
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
  workflow_dispatch:
    inputs:
      release_type:
        description: "major|minor|patch|release|prerel"
        # TODO: change this to `patch` when we are finished publishing pre-releases.
        # ⚠️  Remember to update SEMVER_BUMP default to `patch`.
        default: "prerel"
        required: true
      release_version:
        # ⚠️  For the first release, this will need to be set to `0.3.0-alpha.1` explicitly
        description: "Optional version, e.g. 0.3.0-rc.1"
        required: false

jobs:
  release:
    # ⚠️  If `name` changes, remember to update the `running-workflow-name` property too
    name: "Bump version, tag & release"
    runs-on: ubuntu-latest
    steps:
      - name: "Check out"
        # https://github.com/actions/checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Generate next release version"
        id: release_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMVER_BUMP: ${{ github.event.inputs.release_type }}
        run: |
          previous_release_version="$(gh api /repos/:owner/:repo/releases --jq '.[0].tag_name')"
          # 🧰 comment the above line 👆 & uncomment the line below 👇 when debugging on a fork without any releases
          # previous_release_version="$(gh api /repos/:owner/:repo/tags --jq '.[0].name')"
          echo "PREVIOUS RELEASE VERSION: $previous_release_version"
          printf "::set-output name=%s::%s\n" previous "$previous_release_version"
          if [[ -n "${{ github.event.inputs.release_version }}" ]]
          then
            next_release_version="v${{ github.event.inputs.release_version }}"
          else
            # Rather than introducing an external dependency on `semver` on every run, we commit & use a specific version locally
            # wget https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.3.0/src/semver
            # https://github.com/fsaintjacques/semver-tool
            next_release_version="v$(./semver bump ${SEMVER_BUMP:=prerel} $previous_release_version)"
          fi
          echo "NEXT RELEASE VERSION: $next_release_version"
          printf "::set-output name=%s::%s\n" next "$next_release_version"

      - name: "Fail if no changes since previous release"
        run: |
          echo "Changes since previous release:"
          git diff --color --stat ${{ steps.release_version.outputs.previous }}...$GITHUB_SHA
          if [ -z "$(git diff --color --stat ${{ steps.release_version.outputs.previous }}...$GITHUB_SHA)" ]
          then
            echo "This auto-release was failed on purpose: there have been no changes since ${{ steps.release_version.outputs.previous }}."
            echo "While this can happen, it is rare and we should take notice of it, hence the failure."
            exit 1
          fi

      - name: "Ensure that all other checks have succeeded"
        # https://github.com/lewagon/wait-on-check-action
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10 # polls the GitHub API every 10 every seconds
          running-workflow-name: "Bump version, tag & release"
          allowed-conclusions: success

      - name: "Create next release tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api -X POST /repos/:owner/:repo/git/refs \
            --field ref="refs/tags/${{ steps.release_version.outputs.next }}" \
            --field sha="$GITHUB_SHA"

      - name: "Fetch new tag"
        # https://github.com/actions/checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Install Go"
        # https://github.com/actions/setup-go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: "Release"
        # https://github.com/goreleaser/goreleaser-action
        uses: goreleaser/goreleaser-action@v3
        with:
          args: release --rm-dist --debug
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_DAGGER_CI_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RELEASE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RELEASE_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.RELEASE_AWS_REGION }}
          AWS_BUCKET: ${{ secrets.RELEASE_AWS_BUCKET }}
          ARTEFACTS_FQDN: ${{ secrets.RELEASE_FQDN }}

      # Open a https://github.com/Homebrew/homebrew-core PR to update the bottled formula after we release.
      # This explains why we need to do it separately, on top of GoReleaser updating our Homebrew tap:
      # - https://github.com/Homebrew/homebrew-core/pull/105746#issuecomment-1190522063
      # - https://github.com/dagger/dagger/issues/2823#issuecomment-1190792261
      #
      # TODO: Uncomment this step AFTER we are producing final releases
      # This will not be accepted by Homebrew maintainers otherwise:
      # > Unstable versions (alpha, beta, development versions) are not acceptable for versioned (or unversioned) formulae.
      # > Excerpt from https://docs.brew.sh/Versions
      #
      # - name: "Update homebrew-core formula"
      #   # https://github.com/mislav/bump-homebrew-formula-action
      #   uses: mislav/bump-homebrew-formula-action@v2
      #   with:
      #     download-url: https://github.com/dagger/dagger.git
      #     formula-name: dagger
      #     tag-name: ${{ steps.release_version.outputs.next }}
      #     commit-message: |
      #       {{formulaName}} {{version}}

      #       Created by ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      #       If there is problem with this PR, [open an issue](https://github.com/dagger/dagger/issues/new). The right people will be automatically notified.
      #   env:
      #     COMMITTER_TOKEN: ${{ secrets.RELEASE_DAGGER_CI_TOKEN }}
